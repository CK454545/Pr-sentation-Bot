require('dotenv').config();
const { Client, GatewayIntentBits, Partials, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle, Events, Collection } = require('discord.js');

const TOKEN = process.env.BOT_TOKEN;
const GUILD_ID = process.env.GUILD_ID;
const PRESENTATION_CHANNEL_ID = process.env.PRESENTATION_CHANNEL_ID;
const BUTTON_CHANNEL_ID = process.env.BUTTON_CHANNEL_ID;

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.MessageContent
  ],
  partials: [Partials.Message, Partials.Channel, Partials.User, Partials.GuildMember]
});

// Pour limiter √† une pr√©sentation par membre
const presentedUsers = new Collection();

client.once('ready', async () => {
  console.log(`‚úÖ Connect√© en tant que ${client.user.tag}`);

  // Envoie le bouton si pas d√©j√† pr√©sent (√† commenter si d√©j√† en place)
  const channel = await client.channels.fetch(BUTTON_CHANNEL_ID);
  if (channel) {
    const msg = await channel.send({
      embeds: [
        new EmbedBuilder()
          .setColor('#FF7500')
          .setAuthor({ name: 'NXSTxPr√©sentation', iconURL: 'https://i.goopics.net/4pagyj.png' })
          .setTitle('üé§ Pr√©sente-toi √† la communaut√© !')
          .setDescription([
            'Un petit mot pour te pr√©senter ?',
            'Remplis le formulaire ci-dessous pour que tout le monde puisse te d√©couvrir.',
            '',
            'Tu ne peux te pr√©senter **qu\'une seule fois** ‚Äì alors soigne ta pr√©sentation‚ÄØ!',
            '',
            'Clique sur le bouton pour commencer :'
          ].join('\n'))
          .setFooter({ text: 'NXSTxPr√©sentation ‚Ä¢ Partage & Communaut√©', iconURL: 'https://i.goopics.net/4pagyj.png' })
      ],
      components: [
        new ActionRowBuilder().addComponents(
          new ButtonBuilder()
            .setCustomId('open_presentation')
            .setLabel('üìù Se pr√©senter')
            .setStyle(ButtonStyle.Primary)
        )
      ]
    });
  }
});

client.on('interactionCreate', async (interaction) => {
  if (interaction.isButton() && interaction.customId === 'open_presentation') {
    // V√©rifie si d√©j√† pr√©sent√©
    if (presentedUsers.has(interaction.user.id)) {
      return interaction.reply({ content: '‚ùó Tu as d√©j√† r√©alis√© ta pr√©sentation.', ephemeral: true });
    }

    // Ouvre le modal de pr√©sentation
    const modal = new ModalBuilder()
      .setCustomId('presentation_modal')
      .setTitle('Fais connaissance avec la communaut√© !')
      .addComponents(
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId('age')
            .setLabel("Ton √¢ge (optionnel)")
            .setStyle(TextInputStyle.Short)
            .setRequired(false)
            .setPlaceholder("ex : 20")
        ),
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId('ville')
            .setLabel("Ta ville / r√©gion")
            .setStyle(TextInputStyle.Short)
            .setRequired(false)
            .setPlaceholder("ex : Orl√©ans, Paris...")
        ),
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId('rp_experience')
            .setLabel("Ton exp√©rience RP / hobbies ?")
            .setStyle(TextInputStyle.Short)
            .setRequired(false)
            .setPlaceholder("D√©butant, confirm√©, expert...")
        ),
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId('bio')
            .setLabel("Petite bio (qui es-tu ?)")
            .setStyle(TextInputStyle.Paragraph)
            .setRequired(true)
            .setPlaceholder("Dis-nous qui tu es !")
        )
      );

    await interaction.showModal(modal);
  }

  // Gestion de la soumission du modal
  if (interaction.isModalSubmit() && interaction.customId === 'presentation_modal') {
    if (presentedUsers.has(interaction.user.id)) {
      return interaction.reply({ content: '‚ùó Tu as d√©j√† r√©alis√© ta pr√©sentation.', ephemeral: true });
    }
    presentedUsers.set(interaction.user.id, true);

    // R√©cup√®re les donn√©es du formulaire
    const age = interaction.fields.getTextInputValue('age') || 'Non pr√©cis√©';
    const ville = interaction.fields.getTextInputValue('ville') || 'Non pr√©cis√©';
    const rpExp = interaction.fields.getTextInputValue('rp_experience') || 'Non pr√©cis√©';
    const bio = interaction.fields.getTextInputValue('bio');

    // Cr√©ation de l'embed pr√©sentation
    const embed = new EmbedBuilder()
      .setColor('#FF7500')
      .setAuthor({ name: `Pr√©sentation de ${interaction.user.username}`, iconURL: interaction.user.displayAvatarURL() })
      .setDescription([
        `üë§ **Pseudo :** <@${interaction.user.id}>`,
        `üéÇ **√Çge :** ${age}`,
        `üìç **Ville / R√©gion :** ${ville}`,
        `üéÆ **Exp√©rience RP / Hobbies :** ${rpExp}`,
        `üìù **Bio :**\n${bio}`
      ].join('\n'))
      .setFooter({ text: 'NXSTxPr√©sentation ‚Ä¢ Merci pour ta pr√©sentation !', iconURL: 'https://i.goopics.net/4pagyj.png' });

    // Poste dans le salon de pr√©sentation
    const presChannel = await client.channels.fetch(PRESENTATION_CHANNEL_ID);
    if (presChannel && presChannel.isTextBased()) {
      await presChannel.send({ embeds: [embed] });
    }
    await interaction.reply({ content: '‚úÖ Merci pour ta pr√©sentation !', ephemeral: true });
  }
});

client.login(TOKEN);
